Users with high hit ratio make more purchases

Attribute selection
PYSPARK_DRIVER_PYTHON=ipython pyspark
import pandas as pd
from pyspark.mllib.clustering import KMeans, KMeansModel
from numpy import array

buyclicksDF = pd.read_csv('./buy-clicks.csv')
buyclicksDF = buyclicksDF.rename(columns=lambda x: x.strip()) #remove whitespaces from headers

gameclicksDF = pd.read_csv('./game-clicks.csv')
gameclicksDF = gameclicksDF.rename(columns=lambda x: x.strip()) #remove whitespaces from headers

teamDF = pd.read_csv('./team.csv')
teamDF = teamDF.rename(columns=lambda x: x.strip()) #remove whitespaces from headers

teamassgnDF = pd.read_csv('./team-assignments.csv')
teamassgnDF = teamassgnDF.rename(columns=lambda x: x.strip()) #remove whitespaces from headers

userbuy = buyclicksDF[['userId','price']] #select only userid and price
userclicks  = gameclicksDF[['userId','isHit']]
teamstrength = teamDF[['teamId','strength']]
teamassgn = teamassgnDF[['team','userId']]
teamassgn.columns = ['teamId','userId']
userstrength = teamstrength.merge(teamassgn, on=’userId’)
userstrength = userstrength[['userId','strength']]
Training Dataset creation
totuserbuy = userbuy.groupby('userId').sum()
totuserbuy = totuserbuy.reset_index()
totuserbuy.columns = ['userId','totalpurchase']
useravghit = userclicks.groupby('userId').mean()
useravghit = useravghit.reset_index()
useravghit.columns = ['userId','avgishit']
useravgstrength = userstrength.groupby('userId').mean()
useravgstrength = useravgstrength.reset_index()
useravgstrength.columns = ['userId','avgstrength']

combinedDF = totuserbuy.merge(useravghit, on='userId')
combinedDF = combinedDF.merge(useravgstrength, on='userId')

trainingDF = combinedDF[['avgishit','avgstrength','totalpurchase']]
trainingDF.shape


sqlContext = SQLContext(sc)
pDF = sqlContext.createDataFrame(trainingDF)
parsedData = pDF.rdd.map(lambda line: array([line[0], line[1], line[2])) 

my_kmmodel = KMeans.train(parsedData, 2, maxIterations=10, runs=10, initializationMode="random")

print(my_kmmodel.centers)

